TODO for perl module Math::Expression

This is as much things that I don't think should be added as well
as things that I would/might like to.

Comments to Alain Williams <addw@phcomp.co.uk>

SCCS: @(#)TODO	1.1 03/25/03 14:10:45

Better array handling. The use of an array index would not
be difficult, but is not really that useful without loops.
As for syntax: steal this straight from C/Perl:
	Foo[IndexExpression]


More test cases would not go amiss, especially if they show a way
of doing something - test programs make great examples.


It might be nice if there was a way of validating the names of functions
at Parse time, at the moment it is a run time error.


Evaluation of trees is slow, should all/part of this be rewritten in C ?
To do so would make it more difficult to integrate into a perl program.
I am thinking from the point of view of functions - ie with a FuncEval
and access to hashes. Maybe the code can be speeded up by someone that
is better at perl than I am -- hint, hint !


The functions that I have chosen have been those that I wanted.


I have thought about adding more complex expressions, eg:
	if() { ... } else { ... }
	for( expr ; expr ; expr ) { ... }
They would not be difficult, but would make it bigger/slower/...
I don't think that this is really where the package should go, but
some might be useful - 'for' with arrays especially.


User defined functions. I don't think so.
